<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on smoke</title>
    <link>/tags/go/</link>
    <description>Recent content in go on smoke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jul 2020 15:02:15 +0800</lastBuildDate>
    
	<atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Slice与unsafe</title>
      <link>/blog/go/slice%E4%B8%8Eunsafe.pointer%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 31 Jul 2020 15:02:15 +0800</pubDate>
      
      <guid>/blog/go/slice%E4%B8%8Eunsafe.pointer%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid>
      <description>var o []byte sliceHeader := (*reflect.SliceHeader)((unsafe.Pointer(&amp;amp;o))) sliceHeader.Cap = length sliceHeader.Len = length sliceHeader.Data = uintptr(ptr) </description>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>/blog/go/algorithm/</link>
      <pubDate>Thu, 30 Jul 2020 15:04:19 +0800</pubDate>
      
      <guid>/blog/go/algorithm/</guid>
      <description>参考: https://www.geekxh.com/
#给定 nums = [3,2,2,3], val = 3, #函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 #你不需要考虑数组中超出新长度后面的元素 func removeElement(nums []int, val int) int { for i := 0; i &amp;lt; len(nums);{ if nums[i] == val { nums = append(nums[:i],nums[i+1:]...) }else{ i++ } } retunums) } #我们要想寻找最长公共前缀，那么首先这个前缀是公共的，我们可以从任意一个元素中找到它。假定我们现在就从一个数组中寻找最长公共前缀，那么首先，我们可以将第一个元素设置为基准元素x0。假如数组为[&amp;quot;flow&amp;quot;,&amp;quot;flower&amp;quot;,&amp;quot;flight&amp;quot;]，flow就是我们的基准元素x0。 //GO func longestCommonPrefix(strs []string) string { if len(strs) &amp;lt; 1 { return &amp;quot;&amp;quot; } prefix := strs[0] for _,k := range strs { for strings.Index(k,prefix) !</description>
    </item>
    
    <item>
      <title>Package Build Safe Complete</title>
      <link>/blog/go/package-build-safe-complete/</link>
      <pubDate>Fri, 10 Jan 2020 17:56:05 +0800</pubDate>
      
      <guid>/blog/go/package-build-safe-complete/</guid>
      <description>// tcp防止粘包，封装 package packet import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/binary&amp;#34; &amp;#34;fmt&amp;#34; ) const ( DEFAULE_HEADER = &amp;#34;[**********]&amp;#34; DEFAULT_HEADER_LENGTH = 12 DEFAULT_SAVE_DATA_LENGTH = 4 ) type Packet struct { Header string HeaderLengh int32 SaveDataLength int32 Data []byte } //set delimiter header func (self *Packet) SetHeader(header string) *Packet { self.Header = header self.HeaderLengh = int32(len([]byte(header))) return self } //create default package func NewDefaultPacket(data []byte) *Packet { return &amp;amp;Packet{DEFAULE_HEADER, DEFAULT_HEADER_LENGTH, DEFAULT_SAVE_DATA_LENGTH, data} } //convert to net package func (self *Packet) Packet() []byte { fmt.</description>
    </item>
    
    <item>
      <title>Time Ticker</title>
      <link>/blog/go/time-ticker/</link>
      <pubDate>Mon, 16 Dec 2019 17:48:05 +0800</pubDate>
      
      <guid>/blog/go/time-ticker/</guid>
      <description> // 定时器 func TimeTicker() { tick := time.NewTicker(time.Second * 5) for range tick.C { fmt.Println(&amp;#34;hello --&amp;#34;) } } </description>
    </item>
    
    <item>
      <title>Transfer en Zh</title>
      <link>/blog/go/transfer-en-zh/</link>
      <pubDate>Fri, 06 Dec 2019 17:48:02 +0800</pubDate>
      
      <guid>/blog/go/transfer-en-zh/</guid>
      <description>cli 翻译 package main import ( &amp;#34;encoding/xml&amp;#34; &amp;#34;github.com/bndr/gotabulate&amp;#34; &amp;#34;github.com/fatih/color&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/url&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; ) type ParseXmlData struct { XMLName xml.Name `xml:&amp;#34;yodaodict&amp;#34;` RawInput string `xml:&amp;#34;return-phrase&amp;#34;` CustomTrans CustomNode `xml:&amp;#34;custom-translation&amp;#34;` WebTrans WebTransList `xml:&amp;#34;yodao-web-dict&amp;#34;` } type CustomNode struct { Type string `xml:&amp;#34;type&amp;#34;` Translation []Translation `xml:&amp;#34;translation&amp;#34;` } type WebTransList struct { TransNode []WebTransNode `xml:&amp;#34;web-translation&amp;#34;` } type WebTransNode struct { Key string `xml:&amp;#34;key&amp;#34;` Trans []TransNode `xml:&amp;#34;trans&amp;#34;` } type TransNode struct { Value string `xml:&amp;#34;value,CDATA&amp;#34;` } type Translation struct { Content string `xml:&amp;#34;content,CDATA&amp;#34;` } func HttpGet(url string, ch chan []byte) { resp, err := http.</description>
    </item>
    
    <item>
      <title>Grpc Go Use Builder</title>
      <link>/blog/go/grpc-go-use-builder/</link>
      <pubDate>Tue, 03 Dec 2019 13:22:29 +0800</pubDate>
      
      <guid>/blog/go/grpc-go-use-builder/</guid>
      <description>使用grpc https://github.com/binfer-go/example-grpc
Proto
//命令 protoc --go_out=plugins=grpc:. .\router.proto syntax = &amp;#34;proto3&amp;#34;;package proto;service RouteGuide{ rpc Getfeature(Point) returns (Feature) {} // 普通  rpc ListFeatures(Point) returns (stream Feature) {} // 服务流  rpc RecordRoute(stream Point) returns (Feature) {} // 客户端流  rpc RouteChat(stream Point) returns (stream Feature){} // 双向流 }message Point { int32 latitude = 1; int32 longitude = 2;}message Feature{ int32 id = 1; bytes data = 2;} 简单RPC  // 服务端 var port = &amp;#34;:9900&amp;#34; type routeGuideServer struct { //pb proto.</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>/blog/go/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Mon, 02 Dec 2019 13:13:13 +0800</pubDate>
      
      <guid>/blog/go/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description> 位运算 A = 0011 1100 B = 0000 1101 假定 A 为60, B 为13: 按位与 : A &amp;amp; B = 12 ==&amp;gt; 二进制 : 0000 1100 (A和B相对应的位置有一个为0, 该位置即为 0, 其他维持为1) 按位或 : A | B = 61 ==&amp;gt; 二进制 : 0011 1101 (A和B相对应的位置有一个为1, 该位置即为 1, 其他维持为0) 按位异或 : A ^ B = 49 ==&amp;gt; 二进制 : 0011 0001 (A和B相对应的位置2个都为1, 该位置即为0, 其他维持0或1) 左移运算 : A &amp;lt;&amp;lt; 2 = 240 ==&amp;gt; 二进制 : 1111 0000 (A的二进制位置向左移动2位, 右侧如果是1丢弃) 右移运算 : A &amp;gt;&amp;gt; 2 = 15 ==&amp;gt; 二进制 : 0000 1111 (A的二进制位置向右移动2位, 左侧补0, 右侧0省略) &amp;lt;&amp;lt;=	左移后赋值	C &amp;lt;&amp;lt;= 2 等于 C = C &amp;lt;&amp;lt; 2 &amp;gt;&amp;gt;=	右移后赋值	C &amp;gt;&amp;gt;= 2 等于 C = C &amp;gt;&amp;gt; 2 &amp;amp;=	按位与后赋值	C &amp;amp;= 2 等于 C = C &amp;amp; 2 ^=	按位异或后赋值	C ^= 2 等于 C = C ^ 2 |=	按位或后赋值	C |= 2 等于 C = C | 2 </description>
    </item>
    
    <item>
      <title>Baidu Cloud Download</title>
      <link>/blog/go/baidu-cloud-download/</link>
      <pubDate>Mon, 18 Nov 2019 13:21:41 +0800</pubDate>
      
      <guid>/blog/go/baidu-cloud-download/</guid>
      <description> https://github.com/iikira/BaiduPCS-Go.git
baidu-cloud download  use:   login
 example
 ~~
   </description>
    </item>
    
    <item>
      <title>Dial Sacnning Port</title>
      <link>/blog/go/dial-sacnning-port/</link>
      <pubDate>Fri, 15 Nov 2019 18:35:29 +0800</pubDate>
      
      <guid>/blog/go/dial-sacnning-port/</guid>
      <description>go 实现端口扫描  https://github.com/binfer-go/dials.git  package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main() { startPort := flag.Int(&amp;#34;start-port&amp;#34;, 80, &amp;#34;开始扫描的端口&amp;#34;) endPort := flag.Int(&amp;#34;end-port&amp;#34;, 100, &amp;#34;结束扫描的端口&amp;#34;) timeOut := flag.Duration(&amp;#34;timeout&amp;#34;, time.Millisecond * 200, &amp;#34;超时时间&amp;#34;) flag.Parse() ips := []string{ &amp;#34;127.0.0.1&amp;#34;, &amp;#34;google.com&amp;#34;, &amp;#34;baidu.com&amp;#34;, } // 扫描端口 	Dials(ips, *startPort, *endPort, *timeOut) } func Dials(ips []string, start, end int, timeout time.Duration) { var ( wg = &amp;amp;sync.WaitGroup{} timeOut = time.Millisecond * 200 unUse = map[string][]int{} ) for port := start; port &amp;lt;= end; port++ { wg.</description>
    </item>
    
  </channel>
</rss>