<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on smoke</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on smoke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Nov 2019 13:10:08 +0800</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Temegram Php Message</title>
      <link>/blog/php/temegram-php-message/</link>
      <pubDate>Sat, 30 Nov 2019 13:10:08 +0800</pubDate>
      
      <guid>/blog/php/temegram-php-message/</guid>
      <description>telegram php &amp;lt;?php namespace App\Repositories; use GuzzleHttp\Client; use GuzzleHttp\Psr7\Response; use Illuminate\Support\Facades\Log; // 申请bot,建立订阅通道，建立组，管理订阅通道和组，将bot拉入组内 class TelegramRepository extends BaseRepository { static public $curl; protected $list; public $id, $first_name; public function __construct(){ if (!self::$curl) self::$curl = new Client([&#39;base_uri&#39; =&amp;gt; &amp;quot;https://api.telegram.org/bot&amp;quot;.config(&#39;other.telegram&#39;).&amp;quot;/&amp;quot;]); } public function make() { $result = self::$curl-&amp;gt;get(&amp;quot;getUpdates&amp;quot;, [&#39;verify&#39; =&amp;gt; false]); $this-&amp;gt;list = $result-&amp;gt;getBody()-&amp;gt;getContents(); return $this; } public function one($index=0, $field=&#39;chat&#39;) { if ($this-&amp;gt;list) { $data = json_decode($this-&amp;gt;list, true); if (is_array($data)) { if (isset($data[&#39;result&#39;][$index])) { //chat针对组 $info = $data[&#39;result&#39;][$index][&#39;message&#39;][$field]; foreach ($info as $k=&amp;gt;$v) { $this-&amp;gt;$k = $v; } } } } return $this; } public function push(string $message = &#39;&#39;, callable $call=null) { if ($call)$call($this); $msg = array( &#39;位置 : &#39;.</description>
    </item>
    
    <item>
      <title>Risk Control Safe Rule</title>
      <link>/blog/other/risk-control-safe-rule/</link>
      <pubDate>Tue, 19 Nov 2019 18:32:56 +0800</pubDate>
      
      <guid>/blog/other/risk-control-safe-rule/</guid>
      <description>smoke
会员风控管制  1 可疑名单 (可继续操作，但是行为进行可疑标记)
 2 系统自动管制名单(可继续操作，但是提醒运营对其进行 行为，身份校验)
 3 人工管制名单（行为冻结，通知人工介入，同时发送报告）
 4 异常账户 （账户异常标记，通知人工介入，同时发送报告）
 5 拒绝请求
   取款跟踪
  取款前规则： &amp;hellip; &amp;hellip;&amp;hellip;.. &amp;hellip;.. &amp;hellip;
  订单发起人账户, 姓名， 银行卡实名认证(当次取款订单[拒绝请求]) 订单发起人手机号实名认证(当次取款订单[拒绝请求]) 订单发起人银行卡预留手机号认证(当次取款订单[拒绝请求]) 订单发起人银行借记卡有效性认证(当次取款订单[拒绝请求]) 订单发起人账户状态为[异常]标识， 取款订单信息全部进入[可疑名单] 订单发起人当前ip 与 上次取款成功的订单ip 校验(不一致, 当次取款订单进入[可疑名单]) 订单发起人当前设备 与 上次取款成功的订单设备 校验 (不一致，当次取款订单进入[可疑名单]) 订单发起人当日取款次数超过 N+1次 (当次取款订单进入[可疑名单]) 订单发起人当日取款次数超过 N+n次 (当次取款订单进入[系统管制名单]) 订单发起人当日取款次数超过 N+n+1次 (当次取款订单进入[人工管制名单], 会员账户进行[异常]标识) 订单发起人当日取款次数超过 N+n+n次 (当次取款订单[拒绝请求]) 订单发起人当日取款金额 &amp;gt; 10000元 (当次取款订单进入[可疑名单]) 订单发起人当日取款金额 &amp;gt; 20000元 (当次取款订单进入[系统管制名单]) 订单发起人当日取款金额 &amp;gt; 30000元 (当次取款订单进入[人工管制名单], 会员账户进行[异常]标识) 订单发起人当日取款金额 &amp;gt; 40000元 (当次取款订单[拒绝请求])     存款跟踪</description>
    </item>
    
    <item>
      <title>My Life Live Love List</title>
      <link>/blog/other/my-life-live-love-list/</link>
      <pubDate>Tue, 19 Nov 2019 12:35:53 +0800</pubDate>
      
      <guid>/blog/other/my-life-live-love-list/</guid>
      <description> _ ____ _ _ __ __ _| |_ |__ /_ _ __| | _ _ ___| |_ \ V V / &#39; \ |_ \ &#39;_/ _` |_| &#39; \/ -_) _| \_/\_/|_||_|___/_| \__,_(_)_||_\___|\__| est. 2020 mvp.langer@gmail.com   To help ohters, you don&amp;rsquo;t have to be an efficient expert in the art;
the main thing is the intention
 list # 健身 # 内在精神 # 咖啡制作 # 摄影 # 游戏 # 酒文化  </description>
    </item>
    
    <item>
      <title>Coffee Knowledge Over</title>
      <link>/blog/other/coffee-knowledge-over/</link>
      <pubDate>Tue, 19 Nov 2019 10:21:03 +0800</pubDate>
      
      <guid>/blog/other/coffee-knowledge-over/</guid>
      <description> Coffee - 咖啡)  咖啡带 ：
（英语：Bean Belt）是指在地球的纬度中，种植咖啡豆的地区。因为刚好形成一道带状，所以称之为咖啡带。这一条咖啡带介在北回归线和南回归线之间  咖啡豆 ：
咖啡属植物的种子，咖啡属植物的果实大小类似樱桃，咖啡豆即为其中的核果。将咖啡豆烘焙加工后再磨碎成咖啡粉，即可烹制咖啡。 两个主要的经济品种分别是阿拉比卡种，市占率约75-80％，和罗布斯塔种，市占率20％。阿拉比卡种的咖啡因含量约为0.8-1.4%，而罗布斯塔种则含1.7-4%。由于咖啡是世界上消费最广泛的饮料之一，咖啡种子是一个主要的经济作物，及重要的出口产品 [阿拉比卡种，罗布斯塔种]  咖啡树 ：
正常的一株咖啡树通常可以长到5米（16英尺）至10米（33英尺）高，不过为了采收方便，豆农们常将其修剪至2米（6.6英尺）以下。  组成 ：
咖啡豆由外果皮、果肉、黏液、羊皮纸、银膜、和种子组成  期货交易 ：
咖啡豆作为商品在多个期货市场包括芝加哥商品交易所及洲际交易所都可以自由买卖，交易以阿拉比卡（Arabica）和罗布斯塔（Robusta）两品种的咖啡豆最为常见，其价格会被地缘政治、气候因素、企业交易及投机者效应等因素所影响。  咖啡加工 ：
（Coffee Production）是一种将咖啡树的咖啡果转换为生咖啡豆商品的工业过程。过程中将咖啡果的果实或果肉去除，留下种子或豆子，并将之烘干。不同的加工方式会影响咖啡在烘烤以及冲泡时期的口味。经加工处理过的生咖啡豆，有着未经加工前所没有的特殊口感。  味觉分类：
酸味: 摩卡、夏威夷酸咖啡、墨西哥、危地马拉、哥斯达黎加高地产、吉利马札罗、哥伦比亚、津巴布韦、萨尔瓦多、西半球水洗式高级新豆。 苦味: 爪哇、曼特宁、波哥大、安哥拉、刚果、乌干达的各种旧豆 。 甜味: 哥伦比亚美特宁、委内瑞拉的旧豆、蓝山、吉利马札罗、摩卡、危地马拉、墨西哥、肯尼亚、山多士、海地。 中性味: 巴西、萨尔瓦多、低地哥斯达黎加、委内瑞拉、洪都拉斯、古巴。 香醇: 哥伦比亚美特宁、摩卡、蓝山、危地马拉、哥斯达黎加 。   </description>
    </item>
    
    <item>
      <title>Project Collect Build Lists UseSmoke</title>
      <link>/blog/other/project-collect-build-lists-usesmoke/</link>
      <pubDate>Mon, 18 Nov 2019 13:40:16 +0800</pubDate>
      
      <guid>/blog/other/project-collect-build-lists-usesmoke/</guid>
      <description>  use Go
 Gofer框架 - (文档)[https://goframe.org/index]
Micro框架
 Other project
 markdown使用 
github中文文档收集
苹果超级签名开发demo
  </description>
    </item>
    
    <item>
      <title>Baidu Cloud Download</title>
      <link>/blog/go/baidu-cloud-download/</link>
      <pubDate>Mon, 18 Nov 2019 13:21:41 +0800</pubDate>
      
      <guid>/blog/go/baidu-cloud-download/</guid>
      <description> https://github.com/iikira/BaiduPCS-Go.git
baidu-cloud download  use: &amp;gt; login &amp;gt;&amp;gt; example &amp;gt;&amp;gt;&amp;gt; ~~  </description>
    </item>
    
    <item>
      <title>Dial Sacnning Port</title>
      <link>/blog/go/dial-sacnning-port/</link>
      <pubDate>Fri, 15 Nov 2019 18:35:29 +0800</pubDate>
      
      <guid>/blog/go/dial-sacnning-port/</guid>
      <description>go 实现端口扫描  https://github.com/binfer-go/dials.git
package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) func main() { startPort := flag.Int(&amp;quot;start-port&amp;quot;, 80, &amp;quot;开始扫描的端口&amp;quot;) endPort := flag.Int(&amp;quot;end-port&amp;quot;, 100, &amp;quot;结束扫描的端口&amp;quot;) timeOut := flag.Duration(&amp;quot;timeout&amp;quot;, time.Millisecond * 200, &amp;quot;超时时间&amp;quot;) flag.Parse() ips := []string{ &amp;quot;127.0.0.1&amp;quot;, &amp;quot;google.com&amp;quot;, &amp;quot;baidu.com&amp;quot;, } // 扫描端口 Dials(ips, *startPort, *endPort, *timeOut) } func Dials(ips []string, start, end int, timeout time.Duration) { var ( wg = &amp;amp;sync.WaitGroup{} timeOut = time.Millisecond * 200 unUse = map[string][]int{} ) for port := start; port &amp;lt;= end; port++ { wg.</description>
    </item>
    
  </channel>
</rss>