<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on smoke</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on smoke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Dec 2019 17:48:02 +0800</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transfer en Zh</title>
      <link>/blog/go/transfer-en-zh/</link>
      <pubDate>Fri, 06 Dec 2019 17:48:02 +0800</pubDate>
      
      <guid>/blog/go/transfer-en-zh/</guid>
      <description>cli 翻译 package main import ( &amp;quot;encoding/xml&amp;quot; &amp;quot;github.com/bndr/gotabulate&amp;quot; &amp;quot;github.com/fatih/color&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strings&amp;quot; ) type ParseXmlData struct { XMLName xml.Name `xml:&amp;quot;yodaodict&amp;quot;` RawInput string `xml:&amp;quot;return-phrase&amp;quot;` CustomTrans CustomNode `xml:&amp;quot;custom-translation&amp;quot;` WebTrans WebTransList `xml:&amp;quot;yodao-web-dict&amp;quot;` } type CustomNode struct { Type string `xml:&amp;quot;type&amp;quot;` Translation []Translation `xml:&amp;quot;translation&amp;quot;` } type WebTransList struct { TransNode []WebTransNode `xml:&amp;quot;web-translation&amp;quot;` } type WebTransNode struct { Key string `xml:&amp;quot;key&amp;quot;` Trans []TransNode `xml:&amp;quot;trans&amp;quot;` } type TransNode struct { Value string `xml:&amp;quot;value,CDATA&amp;quot;` } type Translation struct { Content string `xml:&amp;quot;content,CDATA&amp;quot;` } func HttpGet(url string, ch chan []byte) { resp, err := http.</description>
    </item>
    
    <item>
      <title>Clear Time Machine</title>
      <link>/blog/mac/clear-time-machine/</link>
      <pubDate>Thu, 05 Dec 2019 14:23:52 +0800</pubDate>
      
      <guid>/blog/mac/clear-time-machine/</guid>
      <description> 清理 Time machine 本地备份以释放硬盘空间
 10.13之后的系统默认使用 APFS 文件格式，不能关闭本地快照。也就是说一旦你开启了 Time machine，每次备份时都会在你本地留下一份备份，日积月累占用的空间会越来越大
 打开“终端”输入如下代码：sudo tmutil listlocalsnapshots /
 接下来尝试删除第一个快照文件，后面的文件名需要根据自己的显示来改变：tmutil deletelocalsnapshots 2017-12-18-093234
 如果成功，你会发现磁盘空间已经空出来了不少，接下来删除全部的文件快照：sudo tmutil listlocalsnapshots /
  </description>
    </item>
    
    <item>
      <title>Markdown Style Part</title>
      <link>/blog/other/markdown-style-part/</link>
      <pubDate>Wed, 04 Dec 2019 11:12:58 +0800</pubDate>
      
      <guid>/blog/other/markdown-style-part/</guid>
      <description>MARKDOWN STYLE PART  Iframe 
&amp;lt;iframe src=&amp;quot;//music.163.com/outchain/player?type=2&amp;amp;id=536096151&amp;amp;auto=0&amp;amp;height=66&amp;quot; frameborder=&amp;quot;0&amp;quot; width=&amp;quot;100%&amp;quot; height=&amp;quot;86px&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;   css/html   #htmldemo { height: 30px; width: 30px; background-color: #00aa9a; animation-name: moveX; animation-duration: 1s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate; animation-fill-mode: both; } @keyframes moveX { 0% { transform: translateX(1px); } 100% { transform: translateX(750px); } } 
&amp;lt;div id=&amp;quot;htmldemo&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;style&amp;gt; #htmldemo { height: 30px; width: 30px; background-color: #00aa9a; animation-name: moveX; animation-duration: 1s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate; animation-fill-mode: both; } @keyframes moveX { 0% { transform: translateX(0px); } 100% { transform: translateX(100px); } } &amp;lt;/style&amp;gt;    表格     Tables Are Cool Tables Are Cool Are     col 3 is right-aligned \$1600 col 3 is right-aligned \$1600 right-aligned   col 2 is centered \$12 col 2 is centered \$12 centered   zebra stripes are neat \$1 zebra stripes are neat \$1 are neat    | Tables | Are | Cool | Tables | Are | Cool | | ------------- | :-----------: | -----: | ------------- | :-----------: | -----: | | col 3 is | right-aligned | \$1600 | col 3 is | right-aligned | \$1600 | | col 2 is | centered | \$12 | col 2 is | centered | \$12 | | zebra stripes | are neat | \$1 | zebra stripes | are neat | \$1 |   分割线  ---   标记  A  引用   abc</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>/blog/linux/vim/</link>
      <pubDate>Tue, 03 Dec 2019 13:58:19 +0800</pubDate>
      
      <guid>/blog/linux/vim/</guid>
      <description>vim自定义模板 .vimrc
&amp;quot;##### 拷贝后保存为 .vimrc，替换到系统中 &amp;quot;============================================================================== &amp;quot; 处理 Gnome 终端不能使用 alt 快捷键 &amp;quot; 参考：http://landcareweb.com/questions/8623/altjian-kuai-jie-jian-bu-gua-yong-yu-dai-you-vimde-gnomezhong-duan &amp;quot;============================================================================== let c=&#39;a&#39; while c &amp;lt;= &#39;z&#39; exec &amp;quot;set &amp;lt;A-&amp;quot;.c.&amp;quot;&amp;gt;=\e&amp;quot;.c exec &amp;quot;imap \e&amp;quot;.c.&amp;quot; &amp;lt;A-&amp;quot;.c.&amp;quot;&amp;gt;&amp;quot; let c = nr2char(1+char2nr(c)) endw set timeout ttimeoutlen=50 &amp;quot;============================================================================== &amp;quot; vim 内置配置 &amp;quot;============================================================================== &amp;quot; 设置 vimrc 修改保存后立刻生效，不用在重新打开 &amp;quot; 建议配置完成后将这个关闭，否则配置多了之后会很卡 &amp;quot; autocmd BufWritePost $MYVIMRC source $MYVIMRC &amp;quot; 关闭兼容模式 set nocompatible set number &amp;quot; 设置绝对行号 set relativenumber &amp;quot; 设置相对行号 set cursorline &amp;quot;突出显示当前行 &amp;quot; set cursorcolumn &amp;quot; 突出显示当前列 set showmatch &amp;quot; 显示括号匹配 set showcmd &amp;quot; 显示未完成命令 set nowrap &amp;quot; 设置不自动换行 &amp;quot; tab 缩进 set tabstop=4 &amp;quot; 设置Tab长度为4空格 set shiftwidth=4 &amp;quot; 设置自动缩进长度为4空格 set autoindent &amp;quot; 继承前一行的缩进方式，适用于多行注释 &amp;quot; 定义快捷键的前缀，即&amp;lt;Leader&amp;gt; &amp;quot; let mapleader=&amp;quot;;&amp;quot; &amp;quot; 自定义快捷键 &amp;quot; ==== 系统剪切板复制粘贴 ==== &amp;quot; v 模式下复制内容到系统剪切板 vmap &amp;lt;M-c&amp;gt; &amp;quot;+yy &amp;quot; n 模式下复制一行到系统剪切板 nmap &amp;lt;M-c&amp;gt; &amp;quot;+yy &amp;quot; n 模式下粘贴系统剪切板的内容 nmap &amp;lt;M-v&amp;gt; &amp;quot;+p &amp;quot; 修改默认的区域切换如ctrl+w+h 奇幻到左侧， 依次是 左右上下 nmap &amp;lt;M-h&amp;gt; &amp;lt;C-w&amp;gt;h nmap &amp;lt;M-l&amp;gt; &amp;lt;C-w&amp;gt;l nmap &amp;lt;M-k&amp;gt; &amp;lt;C-w&amp;gt;k nmap &amp;lt;M-j&amp;gt; &amp;lt;C-w&amp;gt;j &amp;quot;开启实时搜索 set incsearch &amp;quot; 搜索时大小写不敏感 set ignorecase syntax enable syntax on &amp;quot; 开启文件类型侦测 filetype plugin indent on &amp;quot; 启用自动补全 &amp;quot; 退出插入模式指定类型的文件自动保存 au InsertLeave *.</description>
    </item>
    
    <item>
      <title>Grpc Go Use Builder</title>
      <link>/blog/go/grpc-go-use-builder/</link>
      <pubDate>Tue, 03 Dec 2019 13:22:29 +0800</pubDate>
      
      <guid>/blog/go/grpc-go-use-builder/</guid>
      <description>使用grpc https://github.com/binfer-go/example-grpc
Proto
//命令 protoc --go_out=plugins=grpc:. .\router.proto syntax = &amp;quot;proto3&amp;quot;; package proto; service RouteGuide{ rpc Getfeature(Point) returns (Feature) {} // 普通 rpc ListFeatures(Point) returns (stream Feature) {} // 服务流 rpc RecordRoute(stream Point) returns (Feature) {} // 客户端流 rpc RouteChat(stream Point) returns (stream Feature){} // 双向流 } message Point { int32 latitude = 1; int32 longitude = 2; } message Feature{ int32 id = 1; bytes data = 2; }   简单RPC</description>
    </item>
    
    <item>
      <title>Self Meditation Thoughts Collect</title>
      <link>/blog/other/self-meditation-thoughts-collect/</link>
      <pubDate>Tue, 03 Dec 2019 10:50:45 +0800</pubDate>
      
      <guid>/blog/other/self-meditation-thoughts-collect/</guid>
      <description> 冥想杂念收集记录 ···
[时间] 2019-12-03 10:51:38 [状态] 昏沉 [杂念] 1. 小说情节 2. 烤肠 3. 女生面孔 4. 食堂规则 5. 收集杂念本身 6. 医院(陪同)  ···
···
[时间] 2019-12-04 10:42:18 [状态] 良好 [杂念] 1. 食堂豆腐脑 2. 奶茶 3. 马匹 4. 模糊  ···
[时间] 2019-12-06 10:42:18 [状态] 良好 [杂念] 1. 被指责作弊 2. 杂念  </description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>/blog/go/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Mon, 02 Dec 2019 13:13:13 +0800</pubDate>
      
      <guid>/blog/go/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description> 位运算 A = 0011 1100 B = 0000 1101 假定 A 为60, B 为13: 按位与 : A &amp;amp; B = 12 ==&amp;gt; 二进制 : 0000 1100 (A和B相对应的位置有一个为0, 该位置即为 0, 其他维持为1) 按位或 : A | B = 61 ==&amp;gt; 二进制 : 0011 1101 (A和B相对应的位置有一个为1, 该位置即为 1, 其他维持为0) 按位异或 : A ^ B = 49 ==&amp;gt; 二进制 : 0011 0001 (A和B相对应的位置2个都为1, 该位置即为0, 其他维持0或1) 左移运算 : A &amp;lt;&amp;lt; 2 = 240 ==&amp;gt; 二进制 : 1111 0000 (A的二进制位置向左移动2位, 右侧如果是1丢弃) 右移运算 : A &amp;gt;&amp;gt; 2 = 15 ==&amp;gt; 二进制 : 0000 1111 (A的二进制位置向右移动2位, 左侧补0, 右侧0省略) &amp;lt;&amp;lt;=	左移后赋值	C &amp;lt;&amp;lt;= 2 等于 C = C &amp;lt;&amp;lt; 2 &amp;gt;&amp;gt;=	右移后赋值	C &amp;gt;&amp;gt;= 2 等于 C = C &amp;gt;&amp;gt; 2 &amp;amp;=	按位与后赋值	C &amp;amp;= 2 等于 C = C &amp;amp; 2 ^=	按位异或后赋值	C ^= 2 等于 C = C ^ 2 |=	按位或后赋值	C |= 2 等于 C = C | 2  </description>
    </item>
    
    <item>
      <title>Temegram Php Message</title>
      <link>/blog/php/temegram-php-message/</link>
      <pubDate>Sat, 30 Nov 2019 13:10:08 +0800</pubDate>
      
      <guid>/blog/php/temegram-php-message/</guid>
      <description>telegram php &amp;lt;?php namespace App\Repositories; use GuzzleHttp\Client; use GuzzleHttp\Psr7\Response; use Illuminate\Support\Facades\Log; // 申请bot,建立订阅通道，建立组，管理订阅通道和组，将bot拉入组内 class TelegramRepository extends BaseRepository { static public $curl; protected $list; public $id, $first_name; public function __construct(){ if (!self::$curl) self::$curl = new Client([&#39;base_uri&#39; =&amp;gt; &amp;quot;https://api.telegram.org/bot&amp;quot;.config(&#39;other.telegram&#39;).&amp;quot;/&amp;quot;]); } public function make() { $result = self::$curl-&amp;gt;get(&amp;quot;getUpdates&amp;quot;, [&#39;verify&#39; =&amp;gt; false]); $this-&amp;gt;list = $result-&amp;gt;getBody()-&amp;gt;getContents(); return $this; } public function one($index=0, $field=&#39;chat&#39;) { if ($this-&amp;gt;list) { $data = json_decode($this-&amp;gt;list, true); if (is_array($data)) { if (isset($data[&#39;result&#39;][$index])) { //chat针对组 $info = $data[&#39;result&#39;][$index][&#39;message&#39;][$field]; foreach ($info as $k=&amp;gt;$v) { $this-&amp;gt;$k = $v; } } } } return $this; } public function push(string $message = &#39;&#39;, callable $call=null) { if ($call)$call($this); $msg = array( &#39;位置 : &#39;.</description>
    </item>
    
    <item>
      <title>Risk Control Safe Rule</title>
      <link>/blog/other/risk-control-safe-rule/</link>
      <pubDate>Tue, 19 Nov 2019 18:32:56 +0800</pubDate>
      
      <guid>/blog/other/risk-control-safe-rule/</guid>
      <description>smoke
会员风控管制  1 可疑名单 (可继续操作，但是行为进行可疑标记)
 2 系统自动管制名单(可继续操作，但是提醒运营对其进行 行为，身份校验)
 3 人工管制名单（行为冻结，通知人工介入，同时发送报告）
 4 异常账户 （账户异常标记，通知人工介入，同时发送报告）
 5 拒绝请求
   取款跟踪
  取款前规则： &amp;hellip; &amp;hellip;&amp;hellip;.. &amp;hellip;.. &amp;hellip;
  订单发起人账户, 姓名， 银行卡实名认证(当次取款订单[拒绝请求]) 订单发起人手机号实名认证(当次取款订单[拒绝请求]) 订单发起人银行卡预留手机号认证(当次取款订单[拒绝请求]) 订单发起人银行借记卡有效性认证(当次取款订单[拒绝请求]) 订单发起人账户状态为[异常]标识， 取款订单信息全部进入[可疑名单] 订单发起人当前ip 与 上次取款成功的订单ip 校验(不一致, 当次取款订单进入[可疑名单]) 订单发起人当前设备 与 上次取款成功的订单设备 校验 (不一致，当次取款订单进入[可疑名单]) 订单发起人当日取款次数超过 N+1次 (当次取款订单进入[可疑名单]) 订单发起人当日取款次数超过 N+n次 (当次取款订单进入[系统管制名单]) 订单发起人当日取款次数超过 N+n+1次 (当次取款订单进入[人工管制名单], 会员账户进行[异常]标识) 订单发起人当日取款次数超过 N+n+n次 (当次取款订单[拒绝请求]) 订单发起人当日取款金额 &amp;gt; 10000元 (当次取款订单进入[可疑名单]) 订单发起人当日取款金额 &amp;gt; 20000元 (当次取款订单进入[系统管制名单]) 订单发起人当日取款金额 &amp;gt; 30000元 (当次取款订单进入[人工管制名单], 会员账户进行[异常]标识) 订单发起人当日取款金额 &amp;gt; 40000元 (当次取款订单[拒绝请求])     存款跟踪</description>
    </item>
    
    <item>
      <title>My Life Live Love List</title>
      <link>/blog/other/my-life-live-love-list/</link>
      <pubDate>Tue, 19 Nov 2019 12:35:53 +0800</pubDate>
      
      <guid>/blog/other/my-life-live-love-list/</guid>
      <description> _ ____ _ _ __ __ _| |_ |__ /_ _ __| | _ _ ___| |_ \ V V / &#39; \ |_ \ &#39;_/ _` |_| &#39; \/ -_) _| \_/\_/|_||_|___/_| \__,_(_)_||_\___|\__| est. 2020 mvp.langer@gmail.com   To help ohters, you don&amp;rsquo;t have to be an efficient expert in the art;
the main thing is the intention
 list # 健身 # 内在精神 # 咖啡制作 # 摄影 # 游戏 # 酒文化  </description>
    </item>
    
    <item>
      <title>Coffee Knowledge Over</title>
      <link>/blog/other/coffee-knowledge-over/</link>
      <pubDate>Tue, 19 Nov 2019 10:21:03 +0800</pubDate>
      
      <guid>/blog/other/coffee-knowledge-over/</guid>
      <description>Coffee - 咖啡)  咖啡带 ：
（英语：Bean Belt）是指在地球的纬度中，种植咖啡豆的地区。因为刚好形成一道带状，所以称之为咖啡带。这一条咖啡带介在北回归线和南回归线之间  咖啡豆 ：
咖啡属植物的种子，咖啡属植物的果实大小类似樱桃，咖啡豆即为其中的核果。将咖啡豆烘焙加工后再磨碎成咖啡粉，即可烹制咖啡。 两个主要的经济品种分别是阿拉比卡种，市占率约75-80％，和罗布斯塔种，市占率20％。阿拉比卡种的咖啡因含量约为0.8-1.4%，而罗布斯塔种则含1.7-4%。由于咖啡是世界上消费最广泛的饮料之一，咖啡种子是一个主要的经济作物，及重要的出口产品 [阿拉比卡种，罗布斯塔种]  咖啡树 ：
正常的一株咖啡树通常可以长到5米（16英尺）至10米（33英尺）高，不过为了采收方便，豆农们常将其修剪至2米（6.6英尺）以下。  组成 ：
咖啡豆由外果皮、果肉、黏液、羊皮纸、银膜、和种子组成  期货交易 ：
咖啡豆作为商品在多个期货市场包括芝加哥商品交易所及洲际交易所都可以自由买卖，交易以阿拉比卡（Arabica）和罗布斯塔（Robusta）两品种的咖啡豆最为常见，其价格会被地缘政治、气候因素、企业交易及投机者效应等因素所影响。  咖啡加工 ：
（Coffee Production）是一种将咖啡树的咖啡果转换为生咖啡豆商品的工业过程。过程中将咖啡果的果实或果肉去除，留下种子或豆子，并将之烘干。不同的加工方式会影响咖啡在烘烤以及冲泡时期的口味。经加工处理过的生咖啡豆，有着未经加工前所没有的特殊口感。  味觉分类：
酸味: 摩卡、夏威夷酸咖啡、墨西哥、危地马拉、哥斯达黎加高地产、吉利马札罗、哥伦比亚、津巴布韦、萨尔瓦多、西半球水洗式高级新豆。 苦味: 爪哇、曼特宁、波哥大、安哥拉、刚果、乌干达的各种旧豆 。 甜味: 哥伦比亚美特宁、委内瑞拉的旧豆、蓝山、吉利马札罗、摩卡、危地马拉、墨西哥、肯尼亚、山多士、海地。 中性味: 巴西、萨尔瓦多、低地哥斯达黎加、委内瑞拉、洪都拉斯、古巴。 香醇: 哥伦比亚美特宁、摩卡、蓝山、危地马拉、哥斯达黎加 。   ···
   Tables Are Cool     col 3 is right-aligned \$1600   col 2 is centered \$12   zebra stripes are neat \$1      #htmldemo { height: 30px; width: 30px; background-color: #00aa9a; animation-name: moveX; animation-duration: 1s; animation-timing-function: linear; animation-iteration-count: infinite; animation-direction: alternate; animation-fill-mode: both; } @keyframes moveX { 0% { transform: translateX(1px); } 100% { transform: translateX(800px); } }</description>
    </item>
    
    <item>
      <title>Project Collect Build Lists UseSmoke</title>
      <link>/blog/other/project-collect-build-lists-usesmoke/</link>
      <pubDate>Mon, 18 Nov 2019 13:40:16 +0800</pubDate>
      
      <guid>/blog/other/project-collect-build-lists-usesmoke/</guid>
      <description>use Go
 Go list清单 - 开源项目列表
Gofer框架 - (文档)[https://goframe.org/index]
Micro框架
Gops - 列出和诊断系统上当前正在运行的Go进程的工具
mxget音乐 - 优雅的一站式音乐搜索、下载试听服务，支持国内所有音乐平台
fsnotify - Cross-platform file system notifications for Go
gopherjs - go编译为js
caire - 图片自动分析拉伸维持库
lile - 快速生成grpc方法和测试文件
logrus - 格式化日志输出包
cobra - 眼镜蛇cli交互包 / A Commander for modern Go CLI interactions
Gocui - 命令面板工具1
termui - 命令面板工具2
drone - Drone 是一个基于 Docker的持续集成平台
Gods - Go 语言数据结构、容器、集合、列表、栈、键值对、 BidiMaps、树、HashSet 等
tile38 - Real-time Geospatial and Geofencing</description>
    </item>
    
    <item>
      <title>Baidu Cloud Download</title>
      <link>/blog/go/baidu-cloud-download/</link>
      <pubDate>Mon, 18 Nov 2019 13:21:41 +0800</pubDate>
      
      <guid>/blog/go/baidu-cloud-download/</guid>
      <description> https://github.com/iikira/BaiduPCS-Go.git
baidu-cloud download  use: &amp;gt; login &amp;gt;&amp;gt; example &amp;gt;&amp;gt;&amp;gt; ~~  </description>
    </item>
    
    <item>
      <title>Dial Sacnning Port</title>
      <link>/blog/go/dial-sacnning-port/</link>
      <pubDate>Fri, 15 Nov 2019 18:35:29 +0800</pubDate>
      
      <guid>/blog/go/dial-sacnning-port/</guid>
      <description>go 实现端口扫描  https://github.com/binfer-go/dials.git
package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) func main() { startPort := flag.Int(&amp;quot;start-port&amp;quot;, 80, &amp;quot;开始扫描的端口&amp;quot;) endPort := flag.Int(&amp;quot;end-port&amp;quot;, 100, &amp;quot;结束扫描的端口&amp;quot;) timeOut := flag.Duration(&amp;quot;timeout&amp;quot;, time.Millisecond * 200, &amp;quot;超时时间&amp;quot;) flag.Parse() ips := []string{ &amp;quot;127.0.0.1&amp;quot;, &amp;quot;google.com&amp;quot;, &amp;quot;baidu.com&amp;quot;, } // 扫描端口 Dials(ips, *startPort, *endPort, *timeOut) } func Dials(ips []string, start, end int, timeout time.Duration) { var ( wg = &amp;amp;sync.WaitGroup{} timeOut = time.Millisecond * 200 unUse = map[string][]int{} ) for port := start; port &amp;lt;= end; port++ { wg.</description>
    </item>
    
  </channel>
</rss>